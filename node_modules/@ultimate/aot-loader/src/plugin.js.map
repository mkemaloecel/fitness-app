{"version":3,"file":"plugin.js","sourceRoot":"","sources":["../../src/plugin.ts"],"names":[],"mappings":"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","sourcesContent":["import { extname, dirname, join, relative, resolve, sep } from 'path';\nimport {\n  AotCompiler,\n  analyzeAndValidateNgModules,\n  CompileNgModuleMetadata,\n  createAotCompiler,\n  StaticReflector,\n  StaticSymbol\n} from '@angular/compiler';\nimport {\n  ClassDeclaration,\n  CompilerOptions,\n  createProgram,\n  createSourceFile,\n  Decorator,\n  ImportDeclaration,\n  resolveModuleName,\n  ParsedCommandLine,\n  parseJsonConfigFileContent,\n  Program,\n  ScriptTarget,\n  SourceFile,\n  StringLiteral,\n  SyntaxKind,\n  sys\n} from 'typescript';\nimport {\n  byPropertyName,\n  filterDuplicates,\n  findNodes,\n  getDecorator,\n  getInitializer,\n  getModule,\n  getPropertyAssignments,\n  objToMap\n} from './transform/utils';\n\nimport { Host } from './host';\nimport { AotContext } from './context';\nimport { AngularCompilerOptions, AotCompilerHost } from './compiler';\n\nexport interface AotConfig {\n  entryModule?: string,\n  tsConfig: string\n}\n\nexport interface GeneratedFile {\n  genFileUrl: string,\n  source: string,\n  srcFileUrl: string\n}\n\nconst FILE_EXTENSION = /\\.[^/.]+$/;\nconst INJECTOR = /(\\w+?)Injector/;\n\nexport class AotPlugin {\n  context: AotContext;\n\n  files: string[] = [];\n\n  // dependencies\n  componentDependencies = new Map<string, string[]>();\n  moduleDependencies = new Map<string, string[]>();\n  parentDependencies = new Map<string, string[]>();\n\n  // misc\n  compilePromise: Promise<void> = Promise.resolve();\n  ranInitialCompile = false;\n  entryModule: { path: string, module: string };\n\n  // timing\n  prevTimestamps = new Map<string, number>();\n  startTime = Date.now();\n\n  // resources\n  resources = new Map<string, string[]>();\n  resourcesDependencies = new Map<string, string[]>();\n\n  // cache\n  sourceFileCache = new Map<string, SourceFile>();\n  symbols: StaticSymbol[] = [];\n\n  // tsconfig.json\n  parsedConfig: ParsedCommandLine;\n  tsConfig: {\n    angularCompilerOptions?: AngularCompilerOptions;\n    compilerOptions: CompilerOptions;\n  };\n\n  // compiler and compiler host\n  aotCompiler: { compiler: AotCompiler, reflector: StaticReflector };\n  host: Host;\n  program: Program;\n  ngCompilerHost: AotCompilerHost;\n\n  constructor(private config: AotConfig) {\n    if (!config.tsConfig) {\n      throw new Error('tsconfig.json is required');\n    }\n\n    const tsConfigPath = resolve(process.cwd(), config.tsConfig);\n    try {\n      this.tsConfig = JSON.parse(sys.readFile(tsConfigPath));\n    } catch (err) {\n      throw new Error(`Error parsing tsconfig.json: ${err}`);\n    }\n    this.parsedConfig = parseJsonConfigFileContent(this.tsConfig, sys, dirname(tsConfigPath), null, tsConfigPath);\n    const angularCompilerOptions = this.tsConfig.angularCompilerOptions || {};\n    angularCompilerOptions.basePath = angularCompilerOptions.basePath || dirname(tsConfigPath);\n\n    angularCompilerOptions.genDir = join(angularCompilerOptions.basePath, angularCompilerOptions.genDir || '__generated');\n\n    if (config.entryModule) {\n      angularCompilerOptions.entryModule = config.entryModule;\n    }\n\n    this.tsConfig.angularCompilerOptions = angularCompilerOptions;\n\n    const [path, module] = angularCompilerOptions.entryModule.split('#');\n    this.entryModule = {path, module};\n\n    this.host = new Host(this.parsedConfig.options, angularCompilerOptions.basePath);\n    this.context = new AotContext(this.host);\n\n    this.program = createProgram(this.parsedConfig.fileNames, this.parsedConfig.options, this.host, this.program);\n\n    this.ngCompilerHost = new AotCompilerHost(this.program, angularCompilerOptions, this.context, this.sourceFileCache);\n    this.aotCompiler = createAotCompiler(this.ngCompilerHost, {});\n  }\n\n  apply(compiler: any) {\n    this.context.compiler = compiler;\n    this.host.compiler = compiler;\n\n    // compiler.watchFileSystem.watcher\n\n    let errors: string[] = [];\n    compiler.plugin('make', async (compilation: any, callback: any) => {\n      errors = [];\n      compilation.aotPlugin = this;\n      this.context.compilation = compilation;\n      this.host.compilation = compilation;\n\n      if (!this.ranInitialCompile) {\n        // if we haven't compiled yet, we need to go through all the possible files\n        // in order to resolve the metadata for the whole codebase\n        try {\n          this.createSourceFiles(this.parsedConfig.fileNames, compilation);\n\n          this.compilePromise = this.compileFiles(this.parsedConfig.fileNames);\n          await this.compilePromise;\n          this.ranInitialCompile = true;\n        } catch (err) {\n          errors.push(err);\n        }\n      }\n\n      // manually keep track of file changes so we only recompile the changed files\n      let changedFiles = Object.keys(compilation.fileTimestamps)\n        .filter((file) => (this.prevTimestamps.get(file) || this.startTime) < (compilation.fileTimestamps[file] || Infinity));\n\n      let extraFiles: string[] = [];\n      for (const changedFile of changedFiles) {\n        if (this.resources.has(changedFile)) {\n          extraFiles = filterDuplicates([...extraFiles, ...this.resources.get(changedFile)]);\n        }\n      }\n\n      changedFiles = changedFiles\n        .filter((file) => !this.resources.has(file))\n        .concat(extraFiles);\n\n      this.prevTimestamps = new Map(objToMap<number>(compilation.fileTimestamps));\n\n      const files = changedFiles.length ? changedFiles : this.parsedConfig.fileNames;\n\n      try {\n        this.createSourceFiles(files, compilation);\n\n        if (changedFiles.length) {\n          // compile files if we've got newly updated files\n          this.compilePromise = this.compileFiles(changedFiles);\n          await this.compilePromise;\n        }\n      } catch (err) {\n        errors.push(err);\n      }\n\n      callback();\n    });\n\n    compiler.plugin('after-emit', (compilation: any, callback: any) => {\n      if (errors.length) {\n        // add files to the file dependencies so webpack watches them\n        compilation.fileDependencies = compilation.fileDependencies.concat(this.files);\n        compilation.errors = compilation.errors.concat(errors);\n      }\n      callback();\n    });\n\n    compiler.plugin('after-resolvers', (compiler: any) => {\n      compiler.resolvers.normal.plugin('before-resolve', async (request: any, callback: () => void) => {\n        // we force all resolves to wait for the compilation to finish, except for ones for\n        // resources (styleUrls, templateUrl), otherwise we end up with outdated files\n        const requestExtension = extname(request.request);\n        const isNativeModule = request.request.charAt(0) !== '.';\n        const isNodeModule = /node_modules/.test(request.request);\n        const isResource = this.context.resourceExtensions.includes(requestExtension);\n        const isCompiling = this.context.compiling;\n\n        try {\n          if (!isCompiling && !isResource && !isNativeModule && !isNodeModule && !request.context.skipCompile) {\n            await this.compilePromise;\n          }\n        } catch (err) {\n          // do nothing with the error because it's already handled\n          // not catching it will result in an unhandled rejection error\n        } finally {\n          callback();\n        }\n      });\n    });\n  }\n\n  calculateEmitPath(filePath: string): string {\n    let root = this.tsConfig.angularCompilerOptions.basePath;\n    for (const eachRootDir of this.tsConfig.compilerOptions.rootDirs || []) {\n      if (relative(eachRootDir, filePath).indexOf('.') !== 0) {\n        root = eachRootDir;\n      }\n    }\n\n    let relativePath: string = relative(root, filePath);\n    while (relativePath.startsWith('..' + sep)) {\n      relativePath = relativePath.substr(3);\n    }\n\n    return join(this.tsConfig.angularCompilerOptions.genDir, relativePath);\n  }\n\n  async compileFiles(files: string[], checkDependencies: boolean = true): Promise<void> {\n    const {normal} = this.context.compiler.resolvers;\n\n    function resolveModule(context: string, path: string) {\n      return new Promise<string>((resolve, reject) => {\n        normal.resolve({ skipCompile: true }, context, path, (err: string, path: string, info: any) => {\n          if (err) {\n            return reject(err);\n          }\n          resolve(path);\n        });\n      });\n    }\n\n    for (const file of files) {\n      const sourceFile = this.sourceFileCache.get(file);\n      const loadChildren = getPropertyAssignments(sourceFile).filter(byPropertyName('loadChildren'));\n\n      for (const child of loadChildren) {\n        const [path, module] = getInitializer(child).split('#');\n        try {\n          const resolvedModule = await resolveModule(dirname(file), path);\n\n          (child.initializer as StringLiteral).text = `${resolvedModule}#${module}`;\n        } catch (err) {\n          throw err;\n        }\n      }\n    }\n\n    this.files = this.removeDeletedFiles(filterDuplicates(this.files.concat(files)));\n    // store the compilation in a Promise so we can delay other parts of the build\n    // until this has finished\n    const compiler = (this.aotCompiler.compiler as any);\n    const reflector = (this.aotCompiler.reflector as any);\n\n    function loadMetadata(ngModule: CompileNgModuleMetadata) {\n      return compiler._metadataResolver\n        .loadNgModuleDirectiveAndPipeMetadata(ngModule.type.reference, false);\n    }\n\n    // loop through the changed files and get their canonical file name\n    files = files.map((file) => this.ngCompilerHost.getCanonicalFileName(file));\n\n    // remove any symbols for deleted files\n    this.symbols = this.symbols\n      .filter((symbol) => this.removeDeletedFiles([symbol.filePath]).length);\n    // clear the cache for our files\n    for (const file of files) {\n      compiler._summaryResolver.summaryCache.delete(file);\n      compiler._summaryResolver.loadedFilePaths.delete(file);\n      compiler._symbolResolver.metadataCache.delete(file);\n      compiler._symbolResolver.resolvedFilePaths.delete(file);\n    }\n\n    // filter out any non-source files\n    const sourceFiles = files\n      .filter((fileName) => this.ngCompilerHost.isSourceFile(fileName));\n    // resolve the symbols for our source files\n    for (const sourceFile of sourceFiles) {\n      const symbols = compiler._symbolResolver.getSymbolsOf(sourceFile);\n      for (const symbol of symbols) {\n        const resolvedSymbol = compiler._symbolResolver.resolveSymbol(symbol);\n        const symbolMetadata = resolvedSymbol.metadata;\n        if (symbolMetadata && symbolMetadata.__symbolic !== 'error') {\n          this.symbols.push(resolvedSymbol.symbol);\n        }\n      }\n    }\n\n    // analyze and validate the ngModules for the files that are being compiled\n    let { ngModuleByPipeOrDirective: ngModule, files: filesToCompile, ngModules } =\n      analyzeAndValidateNgModules(this.symbols, this.ngCompilerHost, compiler._metadataResolver);\n    if (this.ranInitialCompile) {\n      // we've already ran the first compilation, so we want to restrict the compilation\n      // to just the changed files, not all files\n      filesToCompile = filesToCompile\n        .filter((file) => files.includes(file.srcUrl));\n    }\n\n    // clear the different caches that may contain the changed files\n    const cachedItems = ['directives', 'pipes', 'ngModules'];\n    for (const analyzedFile of filesToCompile) {\n      for (const item of cachedItems) {\n        (analyzedFile as any)[item].forEach((item: StaticSymbol) => {\n          compiler._metadataResolver.clearCacheFor(item);\n          reflector.annotationCache.delete(item);\n          reflector.propertyCache.delete(item);\n          reflector.parameterCache.delete(item);\n          reflector.methodCache.delete(item);\n        });\n      }\n    }\n    // wait for the metadata collection of all the ngModules to complete\n    await Promise.all(ngModules.map(loadMetadata));\n\n    let generatedFiles: GeneratedFile[] = [];\n    for (const file of filesToCompile) {\n      // attempt to compile the file, reject the build promise if it fails\n      const { directives, injectables, ngModules, pipes, srcUrl } = file;\n      const compiledFile = compiler._compileSrcFile(srcUrl, ngModule, directives, pipes, ngModules, injectables);\n      generatedFiles = generatedFiles.concat(compiledFile);\n    }\n\n    for (const generatedFile of generatedFiles) {\n      const { genFileUrl, source, srcFileUrl } = generatedFile;\n      const emitPath = this.calculateEmitPath(genFileUrl);\n      const emitFileName = emitPath.replace(FILE_EXTENSION, '');\n\n      if (/ngsummary\\.json$/.test(emitPath)) {\n        continue;\n      }\n\n      const sourceFile = createSourceFile(emitPath, source, ScriptTarget.Latest);\n      this.sourceFileCache.set(emitPath, sourceFile);\n\n      const classes = findNodes<ClassDeclaration>(sourceFile, SyntaxKind.ClassDeclaration);\n      const isModule = classes.some((declaration) => INJECTOR.test(declaration.name.text));\n      if (!isModule) {\n        const localDependencies = this.findLocalDependencies(sourceFile)\n          .filter((path) => /ngfactory$/.test(path))\n          .map((path) => join(dirname(emitPath), path));\n\n        for (const path of localDependencies) {\n          if (!this.componentDependencies.has(path)) {\n            this.componentDependencies.set(path, []);\n          }\n          const dependencies = this.componentDependencies.get(path);\n          if (!dependencies.includes(srcFileUrl)) {\n            this.componentDependencies.set(path, this.removeDeletedFiles([...dependencies, srcFileUrl]));\n          }\n        }\n      } else {\n        const parentDependencies = this.parentDependencies.get(srcFileUrl);\n        if (parentDependencies && checkDependencies) {\n          await this.compileFiles(parentDependencies, false);\n        }\n      }\n\n      const shouldCompileDependencies = checkDependencies && this.ranInitialCompile;\n      const isComponentDependency = this.componentDependencies.has(emitFileName);\n      const hasComponentDependency = this.moduleDependencies.has(srcFileUrl);\n\n      if (shouldCompileDependencies) {\n        if (isComponentDependency) {\n          await this.compileFiles(this.componentDependencies.get(emitFileName), false);\n        }\n        if (hasComponentDependency) {\n          await this.compileFiles(this.moduleDependencies.get(srcFileUrl));\n        }\n      }\n      this.host.writeFile(emitPath, generatedFile.source);\n    }\n  }\n\n  createSourceFiles(files: string[], compilation: any) {\n    const { fileSystem } = compilation.resolvers.normal;\n    for (const file of files) {\n      // we cache the source file here as it can be used in multiple places\n      const source = fileSystem.readFileSync(file).toString();\n      const sourceFile = createSourceFile(file, source, ScriptTarget.Latest);\n      this.sourceFileCache.set(file, sourceFile);\n\n      const decorators = findNodes<Decorator>(sourceFile, SyntaxKind.Decorator);\n      const isModule = decorators.some((decorator) => getDecorator(decorator) === 'NgModule');\n      if (isModule) {\n        const {loadChildren, fileDependencies} = this.getModuleDependencies(sourceFile, file);\n        this.createSourceFiles(loadChildren, compilation);\n        if (!compilation.fileDependencies) {\n          compilation.fileDependencies = [];\n        }\n        compilation.fileDependencies = compilation.fileDependencies.concat(fileDependencies);\n      }\n    }\n  }\n\n  getModuleDependencies(sourceFile: SourceFile, file: string) {\n    const fileDependencies: string[] = [];\n    const localDependenciesSearch = this.findLocalDependencies(sourceFile);\n    const localDependencies = localDependenciesSearch\n      .map((path) => resolveModuleName(path, file, this.parsedConfig.options, this.host))\n      .map((resolved, index) => {\n        if (!resolved.resolvedModule) {\n          throw new Error(`Error: ${file} attempted to import ${localDependenciesSearch[index]}, but it doesn't exist`);\n        }\n        return resolved.resolvedModule.resolvedFileName;\n      });\n\n    for (const path of localDependencies) {\n      if (!this.moduleDependencies.has(file)) {\n        this.moduleDependencies.set(file, []);\n      }\n      if (!this.parentDependencies.has(path)) {\n        this.parentDependencies.set(path, []);\n      }\n      const dependencies = this.moduleDependencies.get(file);\n      if (!dependencies.includes(path)) {\n        fileDependencies.push(path);\n        this.moduleDependencies.set(file, this.removeDeletedFiles([...dependencies, path]));\n      }\n      const parentDependencies = this.parentDependencies.get(path);\n      if (!parentDependencies.includes(file)) {\n        this.parentDependencies.set(path, this.removeDeletedFiles([...parentDependencies, file]));\n      }\n    }\n\n    const loadChildren = getPropertyAssignments(sourceFile)\n      .filter(byPropertyName('loadChildren'))\n      .map((child) => getInitializer(child).split('#'))\n      .map(([path]) => {\n        const resolved = resolveModuleName(path, file, this.parsedConfig.options, this.host);\n\n        if (!resolved.resolvedModule) {\n          throw new Error(`Error: ${file} attempted to import ${path}, but it doesn't exist`);\n        }\n\n        return resolved.resolvedModule.resolvedFileName;\n      });\n\n    for (const child of loadChildren) {\n      const dependencies = this.moduleDependencies.get(file);\n      if (!dependencies.includes(child)) {\n        fileDependencies.push(child);\n        this.moduleDependencies.set(file, this.removeDeletedFiles([...dependencies, child]));\n      }\n    }\n\n    return {loadChildren, fileDependencies};\n  }\n\n  findLocalDependencies(sourceFile: SourceFile) {\n    return findNodes<ImportDeclaration>(sourceFile, SyntaxKind.ImportDeclaration)\n      .map((dec) => getModule(dec))\n      .filter((path) => path.charAt(0) === '.');\n  }\n\n  registerResources(from: string, resources: string[]) {\n    const dependencies = this.resourcesDependencies.get(from);\n    if (dependencies) {\n      for (const dependency of dependencies) {\n        if (this.resources.has(dependency)) {\n          const dependencies = this.resources.get(dependency)\n            .filter((dependency) => dependency !== from);\n          this.resources.set(dependency, this.removeDeletedFiles(dependencies));\n        }\n      }\n    }\n\n    this.resourcesDependencies.set(from, [...resources]);\n    for (const resource of resources) {\n      if (!this.resources.has(resource)) {\n        this.resources.set(resource, []);\n      }\n\n      const resources = this.resources.get(resource);\n      if (!resources.includes(from)) {\n        this.resources.set(resource, this.removeDeletedFiles([...resources, from]));\n      }\n    }\n  }\n\n  removeDeletedFiles(files: string[]) {\n    return files.filter((file) => this.host.fileExists(file));\n  }\n}\n"]}