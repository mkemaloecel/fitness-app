import { existsSync } from 'fs';
import { basename, dirname, join } from 'path';
import { createCompilerHost } from 'typescript';
import { Directory, File } from './file';
var isWindows = process.platform.startsWith('win');
var Host = (function () {
    function Host(options, basePath) {
        this.options = options;
        this.basePath = basePath;
        this.directories = {};
        this.host = createCompilerHost(this.options, true);
        this.files = {};
    }
    Host.prototype.directoryExists = function (directoryName) {
        return !!this.directories[directoryName] || this.host.directoryExists(directoryName);
    };
    Host.prototype.fileExists = function (fileName) {
        if (!existsSync(fileName)) {
            delete this.files[fileName];
            return false;
        }
        return !!this.files[fileName] || this.host.fileExists(fileName);
    };
    Host.prototype.getCanonicalFileName = function (fileName) {
        return this.host.getCanonicalFileName(fileName);
    };
    Host.prototype.getCurrentDirectory = function () {
        return this.basePath;
    };
    Host.prototype.getDefaultLibFileName = function (options) {
        return this.host.getDefaultLibFileName(options);
    };
    Host.prototype.getDirectories = function (path) {
        path = this.resolveFileName(path);
        var directories;
        try {
            directories = this.host.getDirectories(path);
        }
        catch (e) {
            directories = [];
        }
        var directoryKeys = Object.keys(this.directories);
        var subDirectories = directoryKeys
            .filter(function (directory) { return dirname(directory) === path; })
            .map(function (path) { return basename(path); });
        return directories.concat(subDirectories);
    };
    Host.prototype.getFiles = function (path) {
        path = this.resolveFileName(path);
        return Object.keys(this.files)
            .filter(function (fileName) { return dirname(fileName) === path; })
            .map(function (path) { return basename(path); });
    };
    Host.prototype.getNewLine = function () {
        return this.host.getNewLine();
    };
    Host.prototype.getSourceFile = function (fileName, languageVersion, onError) {
        fileName = this.resolveFileName(fileName);
        if (this.files[fileName]) {
            return this.files[fileName].getSourceFile(languageVersion, true);
        }
        return this.host.getSourceFile(fileName, languageVersion, onError);
    };
    Host.prototype.readFile = function (fileName) {
        fileName = this.resolveFileName(fileName);
        if (this.files[fileName]) {
            return this.files[fileName].content;
        }
        return this.host.readFile(fileName);
    };
    Host.prototype.resolveFileName = function (fileName) {
        var path = fileName.replace(/\\/g, '/');
        if (path[0] === '.') {
            return join(this.getCurrentDirectory(), path);
        }
        if (path[0] === '/' || path.match(/^\w:\//)) {
            return path;
        }
        return join(this.basePath, path);
    };
    Host.prototype.useCaseSensitiveFileNames = function () {
        return this.host.useCaseSensitiveFileNames();
    };
    Object.defineProperty(Host.prototype, "writeFile", {
        get: function () {
            var _this = this;
            return function (fileName, data) {
                fileName = _this.resolveFileName(fileName);
                _this.files[fileName] = new File(fileName, data);
                var path = dirname(fileName);
                var paths = [];
                while (path && !_this.directories[path]) {
                    paths.push(path);
                    _this.directories[path] = new Directory(path);
                    path = dirname(path);
                }
                var fileSystem = _this.compiler.resolvers.normal.fileSystem;
                var filePath = isWindows ? fileName.replace(/\//g, '\\') : fileName;
                fileSystem._statStorage.data[filePath] = [null, _this.files[fileName]];
                fileSystem._readFileStorage.data[filePath] = [null, _this.files[fileName].content];
                for (var i = 0; i < paths.length; i++) {
                    var dirName = paths[i];
                    var stats = _this.directories[dirName];
                    var dirs = _this.getDirectories(dirName);
                    var files = _this.getFiles(dirName);
                    var dirPath = isWindows ? dirName.replace(/\//g, '\\') : dirName;
                    fileSystem._statStorage.data[dirPath] = [null, stats];
                    fileSystem._readdirStorage.data[dirPath] = [null, files.concat(dirs)];
                }
            };
        },
        enumerable: true,
        configurable: true
    });
    return Host;
}());
export { Host };
//# sourceMappingURL=host.js.map