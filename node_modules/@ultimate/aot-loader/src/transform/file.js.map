{"version":3,"file":"file.js","sourceRoot":"","sources":["../../../src/transform/file.ts"],"names":[],"mappings":"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","sourcesContent":["import MagicString from 'magic-string';\nimport { basename, dirname, join, normalize, relative, resolve } from 'path';\nimport { SourceMapConsumer, SourceMapGenerator } from 'source-map';\nimport {\n  ArrayLiteralExpression,\n  CallExpression,\n  createSourceFile,\n  Decorator,\n  Identifier,\n  ImportDeclaration,\n  NamedImports,\n  NamespaceImport,\n  Node,\n  NodeArray,\n  PropertyAccessExpression,\n  ScriptTarget,\n  SourceFile,\n  StringLiteral,\n  SyntaxKind,\n  transpileModule\n} from 'typescript';\n\nimport { AotPlugin } from '../plugin';\nimport {\n  byPropertyName,\n  findNodes,\n  flatten,\n  getInitializer,\n  getModule,\n  getName,\n  getPropertyAssignments,\n  normalizePath,\n  removeUnnamedImports\n} from './utils';\n\nconst loadChildrenTemplate =\n  ([p, m]: string[]) => `loadChildren:()=>__TROPMI__('${p}.ngfactory').then((r)=>r.${m}NgFactory)`;\n\nconst EXT = /(\\.ts|\\.d\\.ts|\\.js|\\.jsx|\\.tsx)$/;\n\nexport class TransformFile {\n  edited = false;\n  sourceString: string;\n  sourceText: MagicString;\n\n  constructor(\n    public resourcePath: string,\n    public source: string,\n    public aotPlugin: AotPlugin,\n    public generateSourceMap: boolean,\n    public sourceFile?: SourceFile\n  ) {\n    if (!sourceFile) {\n      this.sourceFile = createSourceFile(this.resourcePath, this.source, ScriptTarget.Latest);\n    }\n\n    this.sourceString = this.sourceFile.getFullText(this.sourceFile);\n    this.sourceText = new MagicString(this.sourceString);\n  }\n\n  convertBootstrap(moduleName: string) {\n    const calls = findNodes<CallExpression>(this.sourceFile, SyntaxKind.CallExpression, this.sourceFile, true);\n\n    const bootstraps = calls\n      .filter((node) => node.expression.kind === SyntaxKind.PropertyAccessExpression)\n      .map((node) => node.expression as PropertyAccessExpression);\n\n    const bootstrappedModules = bootstraps\n      .filter((expression) => expression.name.kind === SyntaxKind.Identifier)\n      .filter((expression) => expression.name.text === 'bootstrapModule');\n\n    bootstrappedModules.forEach((bootstrap) => this.replaceNode(bootstrap.name, 'bootstrapModuleFactory'));\n    bootstraps\n      .reduce((previous, next) => previous.concat(findNodes<CallExpression>(next, SyntaxKind.CallExpression, this.sourceFile)), [])\n      .filter((call) => call.expression.kind === SyntaxKind.Identifier)\n      .filter((call) => (call.expression as Identifier).text === 'platformBrowserDynamic')\n      .forEach((call) => this.replaceNode(call.expression, 'platformBrowser'));\n\n    calls\n      .filter((call) => bootstrappedModules.some((bootstrap) => bootstrap === call.expression))\n      .forEach((call) => this.replaceNode(call.arguments[0], moduleName + 'NgFactory'));\n  }\n\n  convertLoadChildren(basePath: string, genDir: string) {\n    const assignments = getPropertyAssignments(this.sourceFile)\n      .filter(byPropertyName('loadChildren'));\n\n    for (const node of assignments) {\n      const [path, module] = getInitializer(node).split('#');\n\n      const dirName = normalize(dirname(this.resourcePath));\n      const genRelativeToBase = relative(basePath, genDir);\n      const fileRelativeToBase = relative(basePath, dirName);\n      const genRelativeToFile = relative(fileRelativeToBase, genRelativeToBase);\n\n      const genToFile = join(genRelativeToFile, relative(basePath, path).replace(EXT, ''));\n      const factoryPath = './' + genToFile.replace(/\\\\/g, '/');\n\n      this.replaceNode(node, loadChildrenTemplate([factoryPath, module]));\n    }\n  }\n\n  convertImport(from: {name: string, module: string}, to: {name: string, module: string}) {\n    const imports = findNodes<ImportDeclaration>(this.sourceFile, SyntaxKind.ImportDeclaration);\n\n    const fromImports = imports\n      .filter((dec) => dec.moduleSpecifier.kind === SyntaxKind.StringLiteral)\n      .filter((dec) => (dec.moduleSpecifier as StringLiteral).text === from.module)\n      .filter(removeUnnamedImports);\n\n    let needsImport = true;\n    if (fromImports.length) {\n      for (let i = 0; i < fromImports.length; i++) {\n        let fromImport = fromImports[i];\n        const namedBindings = (fromImport.importClause.namedBindings as NamedImports);\n        const elements = namedBindings.elements;\n\n        if (elements.some((element) => element.name.text === from.name)) {\n          if (elements.length > 1) {\n            let start = 0;\n            let end = 0;\n            for (let n = 0; n < elements.length; n++) {\n              const element = elements[n];\n              if (element.name.text === from.name) {\n                start = (n > 0) ? elements[n - 1].getEnd() : element.getStart(this.sourceFile);\n                end = (n > 0) ? element.getEnd() : elements[n + 1].getStart(this.sourceFile);\n                break;\n              }\n            }\n\n            this.sourceText.overwrite(start, end, '');\n          } else {\n            needsImport = false;\n            this.replaceNode(fromImport.moduleSpecifier, `'${to.module}'`);\n            this.replaceNode(elements[0], to.name);\n\n            break;\n          }\n        }\n      }\n    }\n\n    if (needsImport) {\n      const toImports = imports\n        .filter((dec) => dec.moduleSpecifier.kind === SyntaxKind.StringLiteral)\n        .filter((dec) => (dec.moduleSpecifier as StringLiteral).text === to.module)\n        .filter(removeUnnamedImports);\n\n      if (toImports.length) {\n        for (let i = 0; i < toImports.length; i++) {\n          const toImport = toImports[i];\n          const namedBindings = (toImport.importClause.namedBindings as NamedImports);\n          const elements = namedBindings.elements;\n          const hasImport = elements.some((element) => element.name.text === to.name);\n\n          if (hasImport) {\n            break;\n          }\n\n          this.sourceText.prependRight(elements[elements.length - 1].getEnd(), `, ${to.name}`);\n        }\n      } else {\n        this.sourceText.prependRight(imports[imports.length - 1].getEnd(), `import {${to.name}} from '${to.module}';`);\n      }\n    }\n  }\n\n  getResources() {\n    const properties = getPropertyAssignments(this.sourceFile);\n\n    let resources: StringLiteral[] = [];\n    const styleUrlsProperty = properties.find(byPropertyName('styleUrls'));\n    if (styleUrlsProperty) {\n      resources = resources.concat((styleUrlsProperty.initializer as ArrayLiteralExpression).elements as NodeArray<StringLiteral>);\n    }\n\n    const templateUrlProperty = properties.find(byPropertyName('templateUrl'));\n    if (templateUrlProperty) {\n      resources.push(templateUrlProperty.initializer as StringLiteral);\n    }\n\n    return resources.map(normalizePath);\n  }\n\n  removeDecorators() {\n    const imports = findNodes<ImportDeclaration>(this.sourceFile, SyntaxKind.ImportDeclaration)\n      .filter((node) => node.moduleSpecifier.kind === SyntaxKind.StringLiteral)\n      .filter((node) => getModule(node).startsWith('@angular/'))\n      .filter((node) => node.importClause && !node.importClause.name && node.importClause.namedBindings)\n      .map((node) => node.importClause.namedBindings);\n\n    const namespaceImports = imports\n      .filter((node) => node.kind === SyntaxKind.NamespaceImport)\n      .map((node) => (node as NamespaceImport).name.text + '.');\n\n    const namedImports = imports\n      .filter((node) => node.kind === SyntaxKind.NamedImports)\n      .map((node) => (node as NamedImports).elements)\n      .map((elements) => elements.map(getName));\n\n    const angularImports = flatten<string>([...namedImports, ...namespaceImports]);\n\n    if (!angularImports.length) {\n      return;\n    }\n\n    function isAngularImport(node: CallExpression) {\n      const decorator = (node.expression as StringLiteral).text;\n      if (decorator.includes('.')) {\n        return angularImports.includes(decorator.replace(/\\..*$/, '') + '.');\n      }\n      return angularImports.includes(decorator);\n    }\n\n    const decorators = findNodes<Decorator>(this.sourceFile, SyntaxKind.Decorator);\n\n    for (const node of decorators) {\n      const expressions = findNodes<CallExpression>(node, SyntaxKind.CallExpression).filter(isAngularImport);\n      for (const expr of expressions) {\n        this.removeNode(node);\n      }\n    }\n  }\n\n  removeNode(node: Node) {\n    this.edited = true;\n    this.sourceText.remove(node.getStart(this.sourceFile), node.getEnd());\n  }\n\n  replaceNode(node: Node, contents: string) {\n    this.edited = true;\n    const store = node.kind === SyntaxKind.Identifier;\n    this.sourceText.overwrite(node.getStart(this.sourceFile), node.getEnd(), contents, store);\n  }\n\n  transpile() {\n    const result = transpileModule(this.sourceText.toString(), {\n      compilerOptions: {\n        ...this.aotPlugin.parsedConfig.options,\n        inlineSources: true,\n        inlineSourceMap: false,\n        sourceMap: true,\n        sourceRoot: this.aotPlugin.parsedConfig.options.baseUrl\n      },\n      fileName: this.resourcePath\n    });\n\n    let sourceMap = JSON.parse(result.sourceMapText);\n\n    if (this.edited && this.generateSourceMap) {\n      const consumer = new SourceMapConsumer(sourceMap);\n      const generator = SourceMapGenerator.fromSourceMap(consumer);\n\n      const textSourceMap = this.sourceText.generateMap({\n        file: basename(this.resourcePath.replace(/\\.ts$/, '.js')),\n        source: this.resourcePath,\n        includeAll: true\n      });\n\n      generator.applySourceMap(new SourceMapConsumer(textSourceMap), this.resourcePath);\n\n      sourceMap = generator.toJSON();\n      sourceMap.sources = [this.resourcePath];\n      sourceMap.file = basename(this.resourcePath, '.ts') + '.js';\n      sourceMap.sourcesContent = [this.sourceString];\n    }\n\n    return {\n      outputText: result.outputText,\n      sourceMap: sourceMap\n    };\n  }\n}\n"]}