import { CompilerOptions, CompilerHost, ScriptTarget, SourceFile } from 'typescript';
import { Directory, File } from './file';
export declare class Host implements CompilerHost {
    private options;
    private basePath;
    compilation: any;
    compiler: any;
    directories: {
        [name: string]: Directory;
    };
    host: CompilerHost;
    files: {
        [name: string]: File;
    };
    constructor(options: CompilerOptions, basePath: string);
    directoryExists(directoryName: string): boolean;
    fileExists(fileName: string): boolean;
    getCanonicalFileName(fileName: string): string;
    getCurrentDirectory(): string;
    getDefaultLibFileName(options: CompilerOptions): string;
    getDirectories(path: string): string[];
    getFiles(path: string): string[];
    getNewLine(): string;
    getSourceFile(fileName: string, languageVersion: ScriptTarget, onError?: (message: string) => void): SourceFile;
    readFile(fileName: string): string;
    resolveFileName(fileName: string): string;
    useCaseSensitiveFileNames(): boolean;
    readonly writeFile: (fileName: string, data: string) => void;
}
