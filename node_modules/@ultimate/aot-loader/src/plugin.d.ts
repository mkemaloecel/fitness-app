import { AotCompiler, StaticReflector, StaticSymbol } from '@angular/compiler';
import { CompilerOptions, ParsedCommandLine, Program, SourceFile } from 'typescript';
import { Host } from './host';
import { AotContext } from './context';
import { AngularCompilerOptions, AotCompilerHost } from './compiler';
export interface AotConfig {
    entryModule?: string;
    tsConfig: string;
}
export interface GeneratedFile {
    genFileUrl: string;
    source: string;
    srcFileUrl: string;
}
export declare class AotPlugin {
    private config;
    context: AotContext;
    files: string[];
    componentDependencies: Map<string, string[]>;
    moduleDependencies: Map<string, string[]>;
    parentDependencies: Map<string, string[]>;
    compilePromise: Promise<void>;
    ranInitialCompile: boolean;
    entryModule: {
        path: string;
        module: string;
    };
    prevTimestamps: Map<string, number>;
    startTime: number;
    resources: Map<string, string[]>;
    resourcesDependencies: Map<string, string[]>;
    sourceFileCache: Map<string, SourceFile>;
    symbols: StaticSymbol[];
    parsedConfig: ParsedCommandLine;
    tsConfig: {
        angularCompilerOptions?: AngularCompilerOptions;
        compilerOptions: CompilerOptions;
    };
    aotCompiler: {
        compiler: AotCompiler;
        reflector: StaticReflector;
    };
    host: Host;
    program: Program;
    ngCompilerHost: AotCompilerHost;
    constructor(config: AotConfig);
    apply(compiler: any): void;
    calculateEmitPath(filePath: string): string;
    compileFiles(files: string[], checkDependencies?: boolean): Promise<void>;
    createSourceFiles(files: string[], compilation: any): void;
    getModuleDependencies(sourceFile: SourceFile, file: string): {
        loadChildren: string[];
        fileDependencies: string[];
    };
    findLocalDependencies(sourceFile: SourceFile): string[];
    registerResources(from: string, resources: string[]): void;
    removeDeletedFiles(files: string[]): string[];
}
