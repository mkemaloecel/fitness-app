var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;
    return { next: verb(0), "throw": verb(1), "return": verb(2) };
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
import { dirname, join, normalize, relative, resolve } from 'path';
import { TransformFile } from './transform/file';
export function aotLoader(source, map) {
    return __awaiter(this, void 0, void 0, function () {
        var _this = this;
        var callback, aotPlugin, err_1, sourceFile, isGenerated, transformFile, angularCompilerOptions, basePath, genDir, dirName, genRelativeToBase, fileRelativeToBase, genRelativeToFile, entryModule, genToEntryFile, fileToEntryFile, normalPath, factoryPath, resources, i, transpiledModule, sourceMap, compiledSource;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    this.cacheable();
                    callback = this.async();
                    aotPlugin = this._compilation.aotPlugin;
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, aotPlugin.compilePromise];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    err_1 = _a.sent();
                    return [2 /*return*/, callback(null, '')];
                case 4:
                    if (aotPlugin.sourceFileCache.has(this.resourcePath)) {
                        sourceFile = aotPlugin.sourceFileCache.get(this.resourcePath);
                    }
                    isGenerated = /\.(ngfactory|ngstyle)(\.|$)/.test(this.resourcePath);
                    transformFile = new TransformFile(this.resourcePath, source, aotPlugin, !isGenerated, sourceFile);
                    angularCompilerOptions = aotPlugin.tsConfig.angularCompilerOptions;
                    basePath = normalize(angularCompilerOptions.basePath);
                    genDir = normalize(angularCompilerOptions.genDir);
                    if (source.match(/bootstrapModule/ig)) {
                        dirName = normalize(dirname(this.resourcePath));
                        genRelativeToBase = relative(basePath, genDir);
                        fileRelativeToBase = relative(basePath, dirName);
                        genRelativeToFile = relative(fileRelativeToBase, genRelativeToBase);
                        entryModule = aotPlugin.entryModule;
                        genToEntryFile = join(genRelativeToFile, entryModule.path + '.ngfactory');
                        fileToEntryFile = join(fileRelativeToBase, entryModule.path);
                        normalPath = './' + fileToEntryFile.replace(/\\/g, '/');
                        factoryPath = './' + genToEntryFile.replace(/\\/g, '/');
                        transformFile.convertBootstrap(entryModule.module);
                        transformFile.convertImport({ name: 'platformBrowserDynamic', module: '@angular/platform-browser-dynamic' }, { name: 'platformBrowser', module: '@angular/platform-browser' });
                        transformFile.convertImport({ name: entryModule.module, module: normalPath }, { name: entryModule.module + "NgFactory", module: factoryPath });
                    }
                    if (/\.ngfactory(\.|$)/.test(this.resourcePath) && /loadChildren/.test(source)) {
                        transformFile.convertLoadChildren(basePath, genDir);
                    }
                    if (!/\.ngfactory(\.|$)/.test(this.resourcePath)) {
                        transformFile.removeDecorators();
                    }
                    if (/templateUrl/.test(source) || /styleUrls/.test(source)) {
                        resources = transformFile
                            .getResources()
                            .map(function (resource) { return resolve(dirname(_this.resourcePath), resource); });
                        for (i = 0; i < resources.length; i++) {
                            this.addDependency(resources[i]);
                        }
                        aotPlugin.registerResources(this.resourcePath, resources);
                    }
                    transpiledModule = transformFile.transpile();
                    sourceMap = transpiledModule.sourceMap;
                    compiledSource = transpiledModule.outputText.replace(/__TROPMI__/g, 'import');
                    callback(null, compiledSource, sourceMap);
                    return [2 /*return*/];
            }
        });
    });
}
//# sourceMappingURL=loader.js.map