var __extends = (this && this.__extends) || (function () {
    var extendStatics = Object.setPrototypeOf ||
        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import { createSourceFile } from 'typescript';
var dev = Math.floor(Math.random() * 100000);
var Stats = (function () {
    function Stats(name) {
        this.name = name;
        this.atime = new Date();
        this.blksize = 512;
        this.btime = new Date();
        this.ctime = new Date();
        this.dev = dev;
        this.gid = process.env['GID'] || 0;
        this.ino = Math.floor(Math.random() * 100000);
        this.mtime = new Date();
        this.nlink = 1;
        this.rdev = 0;
        this.uid = process.env['UID'] || 0;
        this.size = 0;
    }
    Stats.prototype.isFile = function () { return false; };
    Stats.prototype.isDirectory = function () { return false; };
    Stats.prototype.isBlockDevice = function () { return false; };
    Stats.prototype.isCharacterDevice = function () { return false; };
    Stats.prototype.isSymbolicLink = function () { return false; };
    Stats.prototype.isFIFO = function () { return false; };
    Stats.prototype.isSocket = function () { return false; };
    Object.defineProperty(Stats.prototype, "blocks", {
        get: function () {
            return Math.ceil(this.size / this.blksize);
        },
        enumerable: true,
        configurable: true
    });
    return Stats;
}());
export { Stats };
var File = (function (_super) {
    __extends(File, _super);
    function File(name, contents) {
        var _this = _super.call(this, name) || this;
        _this.contents = contents;
        _this._size = 0;
        return _this;
    }
    Object.defineProperty(File.prototype, "content", {
        get: function () {
            return this.contents;
        },
        set: function (content) {
            this.mtime = new Date();
            this.contents = content;
        },
        enumerable: true,
        configurable: true
    });
    File.prototype.getSourceFile = function (languageVersion, setParentNodes) {
        if (!this.sourceFile) {
            this.sourceFile = createSourceFile(this.name, this.contents, languageVersion, setParentNodes);
        }
        return this.sourceFile;
    };
    File.prototype.isFile = function () {
        return true;
    };
    Object.defineProperty(File.prototype, "size", {
        get: function () {
            return this.contents ? this.contents.length : this._size;
        },
        set: function (size) {
            this._size = size;
        },
        enumerable: true,
        configurable: true
    });
    return File;
}(Stats));
export { File };
var Directory = (function (_super) {
    __extends(Directory, _super);
    function Directory(name) {
        var _this = _super.call(this, name) || this;
        _this.size = 1024;
        return _this;
    }
    Directory.prototype.isDirectory = function () {
        return true;
    };
    return Directory;
}(Stats));
export { Directory };
//# sourceMappingURL=file.js.map