{"version":3,"file":"host.js","sourceRoot":"","sources":["../../src/host.ts"],"names":[],"mappings":"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","sourcesContent":["import { existsSync } from 'fs';\nimport { basename, dirname, join } from 'path';\nimport {\n  CompilerOptions,\n  CompilerHost,\n  createCompilerHost,\n  ScriptTarget,\n  SourceFile\n} from 'typescript';\n\nimport { Directory, File } from './file';\n\nconst isWindows = process.platform.startsWith('win');\n\nexport class Host implements CompilerHost {\n  compilation: any;\n  compiler: any;\n  directories: {[name: string]: Directory} = {};\n  host: CompilerHost = createCompilerHost(this.options, true);\n  files: {[name: string]: File} = {};\n\n  constructor(private options: CompilerOptions, private basePath: string) {\n  }\n\n  directoryExists(directoryName: string): boolean {\n    return !!this.directories[directoryName] || this.host.directoryExists(directoryName);\n  }\n\n  fileExists(fileName: string): boolean {\n    if (!existsSync(fileName)) {\n      delete this.files[fileName];\n      return false;\n    }\n    return !!this.files[fileName] || this.host.fileExists(fileName);\n  }\n\n  getCanonicalFileName(fileName: string): string {\n    return this.host.getCanonicalFileName(fileName);\n  }\n\n  getCurrentDirectory(): string {\n    return this.basePath;\n  }\n\n  getDefaultLibFileName(options: CompilerOptions): string {\n    return this.host.getDefaultLibFileName(options);\n  }\n\n  getDirectories(path: string): string[] {\n    path = this.resolveFileName(path);\n\n    let directories: string[];\n\n    try {\n      directories = this.host.getDirectories(path);\n    } catch (e) {\n      directories = [];\n    }\n\n    let directoryKeys = Object.keys(this.directories);\n    let subDirectories = directoryKeys\n      .filter((directory) => dirname(directory) === path)\n      .map((path) => basename(path));\n\n    return [...directories, ...subDirectories];\n  }\n\n  getFiles(path: string): string[] {\n    path = this.resolveFileName(path);\n\n    return Object.keys(this.files)\n      .filter((fileName) => dirname(fileName) === path)\n      .map((path) => basename(path));\n  }\n\n  getNewLine(): string {\n    return this.host.getNewLine();\n  }\n\n  getSourceFile(fileName: string, languageVersion: ScriptTarget, onError?: (message: string) => void): SourceFile {\n    fileName = this.resolveFileName(fileName);\n    if (this.files[fileName]) {\n      return this.files[fileName].getSourceFile(languageVersion, true);\n    }\n    return this.host.getSourceFile(fileName, languageVersion, onError);\n  }\n\n  readFile(fileName: string): string {\n    fileName = this.resolveFileName(fileName);\n    if (this.files[fileName]) {\n      return this.files[fileName].content;\n    }\n    return this.host.readFile(fileName);\n  }\n\n  resolveFileName(fileName: string): string {\n    const path = fileName.replace(/\\\\/g, '/');\n\n    if (path[0] === '.') {\n      return join(this.getCurrentDirectory(), path);\n    }\n    if (path[0] === '/' || path.match(/^\\w:\\//)) {\n      return path;\n    }\n    return join(this.basePath, path);\n  }\n\n  useCaseSensitiveFileNames(): boolean {\n    return this.host.useCaseSensitiveFileNames();\n  }\n\n  get writeFile(): (fileName: string, data: string) => void {\n    return (fileName: string, data: string) => {\n      fileName = this.resolveFileName(fileName);\n\n      this.files[fileName] = new File(fileName, data);\n\n      let path = dirname(fileName);\n      const paths: string[] = [];\n      while (path && !this.directories[path]) {\n        paths.push(path);\n        this.directories[path] = new Directory(path);\n        path = dirname(path);\n      }\n\n      const { fileSystem } = this.compiler.resolvers.normal;\n\n      const filePath = isWindows ? fileName.replace(/\\//g, '\\\\') : fileName;\n      fileSystem._statStorage.data[filePath] = [null, this.files[fileName]];\n      fileSystem._readFileStorage.data[filePath] = [null, this.files[fileName].content];\n\n      for (let i = 0; i < paths.length; i++) {\n        const dirName = paths[i];\n\n        const stats = this.directories[dirName];\n        const dirs = this.getDirectories(dirName);\n        const files = this.getFiles(dirName);\n        const dirPath = isWindows ? dirName.replace(/\\//g, '\\\\') : dirName;\n\n        fileSystem._statStorage.data[dirPath] = [null, stats];\n        fileSystem._readdirStorage.data[dirPath] = [null, files.concat(dirs)];\n      }\n    };\n  }\n}\n"]}